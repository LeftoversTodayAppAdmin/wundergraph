schema {
	query: Query
	mutation: Mutation
}

directive @enum(value: String) on ENUM_VALUE

directive @globalOptions(
	sourceName: String
	endpoint: String
	operationHeaders: ObjMap
	queryStringOptions: ObjMap
	queryParams: ObjMap
) on OBJECT

directive @httpOperation(
	path: String
	operationSpecificHeaders: ObjMap
	httpMethod: HTTPMethod
	isBinary: Boolean
	requestBaseBody: ObjMap
	queryParamArgMap: ObjMap
	queryStringOptionsByParam: ObjMap
) on FIELD_DEFINITION

type Query @globalOptions(sourceName: "pets", endpoint: "dummy-url") {
	"Multiple status values can be provided with comma separated strings"
	findPetsByStatus(
		"Status values that need to be considered for filter"
		status: [queryInput_findPetsByStatus_status_items]!
	): [Pet]
		@httpOperation(
			path: "/pet/findByStatus"
			operationSpecificHeaders: "{\"accept\":\"application/json\"}"
			httpMethod: GET
			queryParamArgMap: "{\"status\":\"status\"}"
			queryStringOptionsByParam: "{\"status\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}"
		)
	"Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
	findPetsByTags("Tags to filter by" tags: [String]!): [Pet]
		@httpOperation(
			path: "/pet/findByTags"
			operationSpecificHeaders: "{\"accept\":\"application/json\"}"
			httpMethod: GET
			queryParamArgMap: "{\"tags\":\"tags\"}"
			queryStringOptionsByParam: "{\"tags\":{\"arrayFormat\":\"repeat\",\"destructObject\":true}}"
		)
	"Returns a single pet"
	getPetById("ID of pet to return" petId: BigInt!): Pet
		@httpOperation(
			path: "/pet/{args.petId}"
			operationSpecificHeaders: "{\"accept\":\"application/json\"}"
			httpMethod: GET
		)
	"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
	getOrderById("ID of pet that needs to be fetched" orderId: BigInt!): Order
		@httpOperation(
			path: "/store/order/{args.orderId}"
			operationSpecificHeaders: "{\"accept\":\"application/json\"}"
			httpMethod: GET
		)
	"Returns a map of status codes to quantities"
	getInventory: JSON
		@httpOperation(
			path: "/store/inventory"
			operationSpecificHeaders: "{\"accept\":\"application/json\"}"
			httpMethod: GET
		)
	"Get user by user name"
	getUserByName("The name that needs to be fetched. Use user1 for testing." username: String!): User
		@httpOperation(
			path: "/user/{args.username}"
			operationSpecificHeaders: "{\"accept\":\"application/json\"}"
			httpMethod: GET
		)
	"Logs user into the system"
	loginUser(
		"requestId"
		_DOLLAR_requestId: String!
		"requestId"
		_DOLLAR__DOLLAR_cookie: String!
		"The user name for login"
		_DOLLAR_username: String!
		"The password for login in clear text"
		_DOLLAR_password: String!
	): String
		@httpOperation(
			path: "/user/login"
			operationSpecificHeaders: "{\"$requestId\":\"{args._DOLLAR_requestId}\",\"cookie\":\"$$cookie={args._DOLLAR__DOLLAR_cookie};\",\"accept\":\"application/json\"}"
			httpMethod: GET
			queryParamArgMap: "{\"$username\":\"_DOLLAR_username\",\"$password\":\"_DOLLAR_password\"}"
		)
	"Logs out current logged in user session"
	logoutUser: JSON @httpOperation(path: "/user/logout", httpMethod: GET)
}

type Pet {
	id: BigInt
	category: Category
	name: String!
	photoUrls: [String]!
	tags: [Tag]
	status: mutationInput_addPet_input_status
}

"The `BigInt` scalar type represents non-fractional signed whole numeric values."
scalar BigInt

type Category {
	id: BigInt
	name: String
}

type Tag {
	id: BigInt
	name: String
}

"pet status in the store"
enum mutationInput_addPet_input_status {
	available
	pending
	sold
}

enum queryInput_findPetsByStatus_status_items {
	available
	pending
	sold
}

type Order {
	id: BigInt
	petId: BigInt
	quantity: Int
	shipDate: DateTime
	status: mutation_placeOrder_status
	complete: Boolean
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"Order Status"
enum mutation_placeOrder_status {
	placed
	approved
	delivered
}

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type User {
	id: BigInt
	username: String
	firstName: String
	lastName: String
	email: String
	password: String
	phone: String
	"User Status"
	userStatus: Int
}

type Mutation {
	"uploads an image"
	uploadFile("ID of pet to update" petId: BigInt!, input: uploadFile_request_Input): ApiResponse
		@httpOperation(
			path: "/pet/{args.petId}/uploadImage"
			operationSpecificHeaders: "{\"Content-Type\":\"multipart/form-data\",\"accept\":\"application/json\"}"
			httpMethod: POST
		)
	"Add a new pet to the store"
	addPet(input: Pet_Input): JSON
		@httpOperation(path: "/pet", operationSpecificHeaders: "{\"Content-Type\":\"application/json\"}", httpMethod: POST)
	"Update an existing pet"
	updatePet(input: Pet_Input): JSON
		@httpOperation(path: "/pet", operationSpecificHeaders: "{\"Content-Type\":\"application/json\"}", httpMethod: PUT)
	"Updates a pet in the store with form data"
	updatePetWithForm("ID of pet that needs to be updated" petId: BigInt!, input: updatePetWithForm_request_Input): JSON
		@httpOperation(
			path: "/pet/{args.petId}"
			operationSpecificHeaders: "{\"Content-Type\":\"application/x-www-form-urlencoded\"}"
			httpMethod: POST
		)
	"Deletes a pet"
	deletePet(api_key: String, "Pet id to delete" petId: BigInt!): JSON
		@httpOperation(
			path: "/pet/{args.petId}"
			operationSpecificHeaders: "{\"api_key\":\"{args.api_key}\"}"
			httpMethod: DELETE
		)
	"Place an order for a pet"
	placeOrder(input: Order_Input): Order
		@httpOperation(
			path: "/store/order"
			operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"accept\":\"application/json\"}"
			httpMethod: POST
		)
	"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
	deleteOrder("ID of the order that needs to be deleted" orderId: BigInt!): JSON
		@httpOperation(path: "/store/order/{args.orderId}", httpMethod: DELETE)
	"This can only be done by the logged in user."
	updateUser("name that need to be updated" username: String!, input: User_Input): JSON
		@httpOperation(
			path: "/user/{args.username}"
			operationSpecificHeaders: "{\"Content-Type\":\"application/json\"}"
			httpMethod: PUT
		)
	"This can only be done by the logged in user."
	deleteUser("The name that needs to be deleted" username: String!): JSON
		@httpOperation(path: "/user/{args.username}", httpMethod: DELETE)
	"Creates list of users with given input array"
	createUsersWithArrayInput("List of user object" input: [User_Input]): JSON
		@httpOperation(
			path: "/user/createWithArray"
			operationSpecificHeaders: "{\"Content-Type\":\"application/json\"}"
			httpMethod: POST
		)
	"Creates list of users with given input array"
	createUsersWithListInput("List of user object" input: [User_Input]): JSON
		@httpOperation(
			path: "/user/createWithList"
			operationSpecificHeaders: "{\"Content-Type\":\"application/json\"}"
			httpMethod: POST
		)
	"This can only be done by the logged in user."
	createUser(input: User_Input): JSON
		@httpOperation(path: "/user", operationSpecificHeaders: "{\"Content-Type\":\"application/json\"}", httpMethod: POST)
}

type ApiResponse {
	code: Int
	type: String
	message: String
}

input uploadFile_request_Input {
	"Additional data to pass to server"
	additionalMetadata: String
	"file to upload"
	file: File
}

"The `File` scalar type represents a file upload."
scalar File

input Pet_Input {
	id: BigInt
	category: Category_Input
	name: String!
	photoUrls: [String]!
	tags: [Tag_Input]
	status: mutationInput_addPet_input_status
}

input Category_Input {
	id: BigInt
	name: String
}

input Tag_Input {
	id: BigInt
	name: String
}

input updatePetWithForm_request_Input {
	"Updated name of the pet"
	name: String
	"Updated status of the pet"
	status: String
}

input Order_Input {
	id: BigInt
	petId: BigInt
	quantity: Int
	shipDate: DateTime
	status: mutation_placeOrder_status
	complete: Boolean
}

input User_Input {
	id: BigInt
	username: String
	firstName: String
	lastName: String
	email: String
	password: String
	phone: String
	"User Status"
	userStatus: Int
}

scalar ObjMap

enum HTTPMethod {
	GET
	HEAD
	POST
	PUT
	DELETE
	CONNECT
	OPTIONS
	TRACE
	PATCH
}
