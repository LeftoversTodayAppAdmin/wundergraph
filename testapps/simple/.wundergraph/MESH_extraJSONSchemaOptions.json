{
  "operations": [
    {
      "method": "POST",
      "path": "/pet/{args.petId}/uploadImage",
      "type": "mutation",
      "field": "uploadFile",
      "description": "uploads an image",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "title": "ApiResponse",
            "$resolvedRef": "/components/schemas/ApiResponse"
          }
        }
      },
      "argTypeMap": {
        "petId": {
          "type": "integer",
          "format": "int64",
          "name": "petId",
          "description": "ID of pet to update",
          "nullable": false
        }
      },
      "requestSchema": {
        "type": "object",
        "properties": {
          "additionalMetadata": {
            "description": "Additional data to pass to server",
            "type": "string"
          },
          "file": {
            "description": "file to upload",
            "type": "string",
            "format": "binary"
          }
        },
        "title": "uploadFile_request"
      },
      "headers": {
        "Content-Type": "multipart/form-data",
        "accept": "application/json"
      }
    },
    {
      "method": "POST",
      "path": "/pet",
      "type": "mutation",
      "field": "addPet",
      "description": "Add a new pet to the store",
      "responseByStatusCode": {},
      "requestSchema": {
        "type": "object",
        "required": ["name", "photoUrls"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            },
            "xml": {
              "name": "Category"
            },
            "title": "Category",
            "$resolvedRef": "/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "Tag"
              },
              "title": "Tag",
              "$resolvedRef": "/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": {
          "name": "Pet"
        },
        "title": "Pet",
        "$resolvedRef": "/components/schemas/Pet"
      },
      "headers": {
        "Content-Type": "application/json"
      }
    },
    {
      "method": "PUT",
      "path": "/pet",
      "type": "mutation",
      "field": "updatePet",
      "description": "Update an existing pet",
      "responseByStatusCode": {},
      "requestSchema": {
        "type": "object",
        "required": ["name", "photoUrls"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            },
            "xml": {
              "name": "Category"
            },
            "title": "Category",
            "$resolvedRef": "/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "Tag"
              },
              "title": "Tag",
              "$resolvedRef": "/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": {
          "name": "Pet"
        },
        "title": "Pet",
        "$resolvedRef": "/components/schemas/Pet"
      },
      "headers": {
        "Content-Type": "application/json"
      }
    },
    {
      "method": "GET",
      "path": "/pet/findByStatus",
      "type": "query",
      "field": "findPetsByStatus",
      "description": "Multiple status values can be provided with comma separated strings",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["name", "photoUrls"],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "xml": {
                    "name": "Category"
                  },
                  "title": "Category",
                  "$resolvedRef": "/components/schemas/Category"
                },
                "name": {
                  "type": "string",
                  "example": "doggie"
                },
                "photoUrls": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "string",
                    "xml": {
                      "name": "photoUrl"
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Tag"
                    },
                    "title": "Tag",
                    "$resolvedRef": "/components/schemas/Tag"
                  }
                },
                "status": {
                  "type": "string",
                  "description": "pet status in the store",
                  "enum": ["available", "pending", "sold"]
                }
              },
              "xml": {
                "name": "Pet"
              },
              "title": "Pet",
              "$resolvedRef": "/components/schemas/Pet"
            }
          }
        }
      },
      "argTypeMap": {
        "status": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["available", "pending", "sold"],
            "default": "available"
          },
          "name": "status",
          "description": "Status values that need to be considered for filter",
          "nullable": false
        }
      },
      "queryParamArgMap": {
        "status": "status"
      },
      "queryStringOptionsByParam": {
        "status": {
          "arrayFormat": "repeat",
          "destructObject": true
        }
      },
      "headers": {
        "accept": "application/json"
      }
    },
    {
      "method": "GET",
      "path": "/pet/findByTags",
      "type": "query",
      "field": "findPetsByTags",
      "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["name", "photoUrls"],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "xml": {
                    "name": "Category"
                  },
                  "title": "Category",
                  "$resolvedRef": "/components/schemas/Category"
                },
                "name": {
                  "type": "string",
                  "example": "doggie"
                },
                "photoUrls": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "string",
                    "xml": {
                      "name": "photoUrl"
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Tag"
                    },
                    "title": "Tag",
                    "$resolvedRef": "/components/schemas/Tag"
                  }
                },
                "status": {
                  "type": "string",
                  "description": "pet status in the store",
                  "enum": ["available", "pending", "sold"]
                }
              },
              "xml": {
                "name": "Pet"
              },
              "title": "Pet",
              "$resolvedRef": "/components/schemas/Pet"
            }
          }
        }
      },
      "argTypeMap": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "name": "tags",
          "description": "Tags to filter by",
          "nullable": false
        }
      },
      "queryParamArgMap": {
        "tags": "tags"
      },
      "queryStringOptionsByParam": {
        "tags": {
          "arrayFormat": "repeat",
          "destructObject": true
        }
      },
      "headers": {
        "accept": "application/json"
      }
    },
    {
      "method": "GET",
      "path": "/pet/{args.petId}",
      "type": "query",
      "field": "getPetById",
      "description": "Returns a single pet",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "type": "object",
            "required": ["name", "photoUrls"],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "category": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "xml": {
                  "name": "Category"
                },
                "title": "Category",
                "$resolvedRef": "/components/schemas/Category"
              },
              "name": {
                "type": "string",
                "example": "doggie"
              },
              "photoUrls": {
                "type": "array",
                "xml": {
                  "wrapped": true
                },
                "items": {
                  "type": "string",
                  "xml": {
                    "name": "photoUrl"
                  }
                }
              },
              "tags": {
                "type": "array",
                "xml": {
                  "wrapped": true
                },
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "xml": {
                    "name": "Tag"
                  },
                  "title": "Tag",
                  "$resolvedRef": "/components/schemas/Tag"
                }
              },
              "status": {
                "type": "string",
                "description": "pet status in the store",
                "enum": ["available", "pending", "sold"]
              }
            },
            "xml": {
              "name": "Pet"
            },
            "title": "Pet",
            "$resolvedRef": "/components/schemas/Pet"
          }
        }
      },
      "argTypeMap": {
        "petId": {
          "type": "integer",
          "format": "int64",
          "name": "petId",
          "description": "ID of pet to return",
          "nullable": false
        }
      },
      "headers": {
        "accept": "application/json"
      }
    },
    {
      "method": "POST",
      "path": "/pet/{args.petId}",
      "type": "mutation",
      "field": "updatePetWithForm",
      "description": "Updates a pet in the store with form data",
      "responseByStatusCode": {},
      "argTypeMap": {
        "petId": {
          "type": "integer",
          "format": "int64",
          "name": "petId",
          "description": "ID of pet that needs to be updated",
          "nullable": false
        }
      },
      "requestSchema": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Updated name of the pet",
            "type": "string"
          },
          "status": {
            "description": "Updated status of the pet",
            "type": "string"
          }
        },
        "title": "updatePetWithForm_request"
      },
      "headers": {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    },
    {
      "method": "DELETE",
      "path": "/pet/{args.petId}",
      "type": "mutation",
      "field": "deletePet",
      "description": "Deletes a pet",
      "responseByStatusCode": {},
      "argTypeMap": {
        "api_key": {
          "type": "string",
          "name": "api_key"
        },
        "petId": {
          "type": "integer",
          "format": "int64",
          "name": "petId",
          "description": "Pet id to delete",
          "nullable": false
        }
      },
      "headers": {
        "api_key": "{args.api_key}"
      }
    },
    {
      "method": "POST",
      "path": "/store/order",
      "type": "mutation",
      "field": "placeOrder",
      "description": "Place an order for a pet",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "petId": {
                "type": "integer",
                "format": "int64"
              },
              "quantity": {
                "type": "integer",
                "format": "int32"
              },
              "shipDate": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "description": "Order Status",
                "enum": ["placed", "approved", "delivered"]
              },
              "complete": {
                "type": "boolean"
              }
            },
            "xml": {
              "name": "Order"
            },
            "title": "Order",
            "$resolvedRef": "/components/schemas/Order"
          }
        }
      },
      "requestSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "Order"
        },
        "title": "Order",
        "$resolvedRef": "/components/schemas/Order"
      },
      "headers": {
        "Content-Type": "application/json",
        "accept": "application/json"
      }
    },
    {
      "method": "GET",
      "path": "/store/order/{args.orderId}",
      "type": "query",
      "field": "getOrderById",
      "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "petId": {
                "type": "integer",
                "format": "int64"
              },
              "quantity": {
                "type": "integer",
                "format": "int32"
              },
              "shipDate": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "description": "Order Status",
                "enum": ["placed", "approved", "delivered"]
              },
              "complete": {
                "type": "boolean"
              }
            },
            "xml": {
              "name": "Order"
            },
            "title": "Order",
            "$resolvedRef": "/components/schemas/Order"
          }
        }
      },
      "argTypeMap": {
        "orderId": {
          "type": "integer",
          "format": "int64",
          "minimum": 1,
          "maximum": 10,
          "name": "orderId",
          "description": "ID of pet that needs to be fetched",
          "nullable": false
        }
      },
      "headers": {
        "accept": "application/json"
      }
    },
    {
      "method": "DELETE",
      "path": "/store/order/{args.orderId}",
      "type": "mutation",
      "field": "deleteOrder",
      "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
      "responseByStatusCode": {},
      "argTypeMap": {
        "orderId": {
          "type": "integer",
          "format": "int64",
          "minimum": 1,
          "name": "orderId",
          "description": "ID of the order that needs to be deleted",
          "nullable": false
        }
      }
    },
    {
      "method": "GET",
      "path": "/store/inventory",
      "type": "query",
      "field": "getInventory",
      "description": "Returns a map of status codes to quantities",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "headers": {
        "accept": "application/json"
      }
    },
    {
      "method": "GET",
      "path": "/user/{args.username}",
      "type": "query",
      "field": "getUserByName",
      "description": "Get user by user name",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "username": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "userStatus": {
                "type": "integer",
                "format": "int32",
                "description": "User Status"
              }
            },
            "xml": {
              "name": "User"
            },
            "title": "User",
            "$resolvedRef": "/components/schemas/User"
          }
        }
      },
      "argTypeMap": {
        "username": {
          "type": "string",
          "name": "username",
          "description": "The name that needs to be fetched. Use user1 for testing. ",
          "nullable": false
        }
      },
      "headers": {
        "accept": "application/json"
      }
    },
    {
      "method": "PUT",
      "path": "/user/{args.username}",
      "type": "mutation",
      "field": "updateUser",
      "description": "This can only be done by the logged in user.",
      "responseByStatusCode": {},
      "argTypeMap": {
        "username": {
          "type": "string",
          "name": "username",
          "description": "name that need to be updated",
          "nullable": false
        }
      },
      "requestSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        },
        "xml": {
          "name": "User"
        },
        "title": "User",
        "$resolvedRef": "/components/schemas/User"
      },
      "headers": {
        "Content-Type": "application/json"
      }
    },
    {
      "method": "DELETE",
      "path": "/user/{args.username}",
      "type": "mutation",
      "field": "deleteUser",
      "description": "This can only be done by the logged in user.",
      "responseByStatusCode": {},
      "argTypeMap": {
        "username": {
          "type": "string",
          "name": "username",
          "description": "The name that needs to be deleted",
          "nullable": false
        }
      }
    },
    {
      "method": "GET",
      "path": "/user/login",
      "type": "query",
      "field": "loginUser",
      "description": "Logs user into the system",
      "responseByStatusCode": {
        "200": {
          "responseSchema": {
            "type": "string"
          }
        }
      },
      "argTypeMap": {
        "_DOLLAR_username": {
          "type": "string",
          "name": "$username",
          "description": "The user name for login",
          "nullable": false
        },
        "_DOLLAR_password": {
          "type": "string",
          "name": "$password",
          "description": "The password for login in clear text",
          "nullable": false
        },
        "_DOLLAR_requestId": {
          "type": "string",
          "name": "$requestId",
          "description": "requestId",
          "nullable": false
        },
        "_DOLLAR__DOLLAR_cookie": {
          "type": "string",
          "name": "$$cookie",
          "description": "requestId",
          "nullable": false
        }
      },
      "queryParamArgMap": {
        "$username": "_DOLLAR_username",
        "$password": "_DOLLAR_password"
      },
      "headers": {
        "$requestId": "{args._DOLLAR_requestId}",
        "cookie": "$$cookie={args._DOLLAR__DOLLAR_cookie};",
        "accept": "application/json"
      }
    },
    {
      "method": "GET",
      "path": "/user/logout",
      "type": "query",
      "field": "logoutUser",
      "description": "Logs out current logged in user session",
      "responseByStatusCode": {}
    },
    {
      "method": "POST",
      "path": "/user/createWithArray",
      "type": "mutation",
      "field": "createUsersWithArrayInput",
      "description": "Creates list of users with given input array",
      "responseByStatusCode": {},
      "requestSchema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "username": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "userStatus": {
              "type": "integer",
              "format": "int32",
              "description": "User Status"
            }
          },
          "xml": {
            "name": "User"
          },
          "title": "User",
          "$resolvedRef": "/components/schemas/User"
        },
        "title": "UserArray_request",
        "description": "List of user object"
      },
      "headers": {
        "Content-Type": "application/json"
      }
    },
    {
      "method": "POST",
      "path": "/user/createWithList",
      "type": "mutation",
      "field": "createUsersWithListInput",
      "description": "Creates list of users with given input array",
      "responseByStatusCode": {},
      "requestSchema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "username": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "userStatus": {
              "type": "integer",
              "format": "int32",
              "description": "User Status"
            }
          },
          "xml": {
            "name": "User"
          },
          "title": "User",
          "$resolvedRef": "/components/schemas/User"
        },
        "title": "UserArray_request",
        "description": "List of user object"
      },
      "headers": {
        "Content-Type": "application/json"
      }
    },
    {
      "method": "POST",
      "path": "/user",
      "type": "mutation",
      "field": "createUser",
      "description": "This can only be done by the logged in user.",
      "responseByStatusCode": {},
      "requestSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        },
        "xml": {
          "name": "User"
        },
        "title": "User",
        "$resolvedRef": "/components/schemas/User"
      },
      "headers": {
        "Content-Type": "application/json"
      }
    }
  ],
  "endpoint": "dummy-url"
}
